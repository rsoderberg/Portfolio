#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OITJP2016
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WhiteElephantDB")]
	public partial class WhiteElephantDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFriendlyName(FriendlyName instance);
    partial void UpdateFriendlyName(FriendlyName instance);
    partial void DeleteFriendlyName(FriendlyName instance);
    partial void InsertPasswordTable(PasswordTable instance);
    partial void UpdatePasswordTable(PasswordTable instance);
    partial void DeletePasswordTable(PasswordTable instance);
    partial void InsertUserTable(UserTable instance);
    partial void UpdateUserTable(UserTable instance);
    partial void DeleteUserTable(UserTable instance);
    partial void InsertAspNetUser(AspNetUser instance);
    partial void UpdateAspNetUser(AspNetUser instance);
    partial void DeleteAspNetUser(AspNetUser instance);
    partial void InsertUserGroupTable(UserGroupTable instance);
    partial void UpdateUserGroupTable(UserGroupTable instance);
    partial void DeleteUserGroupTable(UserGroupTable instance);
    partial void InsertEventTable(EventTable instance);
    partial void UpdateEventTable(EventTable instance);
    partial void DeleteEventTable(EventTable instance);
    partial void InsertGroupTable(GroupTable instance);
    partial void UpdateGroupTable(GroupTable instance);
    partial void DeleteGroupTable(GroupTable instance);
    #endregion
		
		public WhiteElephantDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["WhiteElephantConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public WhiteElephantDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WhiteElephantDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WhiteElephantDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WhiteElephantDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<FriendlyName> FriendlyNames
		{
			get
			{
				return this.GetTable<FriendlyName>();
			}
		}
		
		public System.Data.Linq.Table<PasswordTable> PasswordTables
		{
			get
			{
				return this.GetTable<PasswordTable>();
			}
		}
		
		public System.Data.Linq.Table<UserTable> UserTables
		{
			get
			{
				return this.GetTable<UserTable>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUser> AspNetUsers
		{
			get
			{
				return this.GetTable<AspNetUser>();
			}
		}
		
		public System.Data.Linq.Table<UserGroupTable> UserGroupTables
		{
			get
			{
				return this.GetTable<UserGroupTable>();
			}
		}
		
		public System.Data.Linq.Table<EventTable> EventTables
		{
			get
			{
				return this.GetTable<EventTable>();
			}
		}
		
		public System.Data.Linq.Table<GroupTable> GroupTables
		{
			get
			{
				return this.GetTable<GroupTable>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_AddNewUser")]
		public int usp_AddNewUser([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserName", DbType="VarChar(128)")] string userName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Password", DbType="VarChar(64)")] string password, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FriendlyName", DbType="VarChar(128)")] string friendlyName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userName, password, friendlyName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_DeleteUser")]
		public int usp_DeleteUser([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserName", DbType="VarChar(128)")] string userName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_UpdateUser")]
		public int usp_UpdateUser([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserName", DbType="VarChar(128)")] string userName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NewFriendlyName", DbType="VarChar(128)")] string newFriendlyName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NewPassword", DbType="VarChar(64)")] string newPassword)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userName, newFriendlyName, newPassword);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_AddUserToGroup")]
		public int usp_AddUserToGroup([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserEmail", DbType="NVarChar(256)")] string userEmail, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupId", DbType="Int")] System.Nullable<int> groupId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="StatusName", DbType="VarChar(128)")] string statusName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userEmail, groupId, statusName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_DeleteGroup")]
		public int usp_DeleteGroup([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupId", DbType="Int")] System.Nullable<int> groupId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_GetGroupUsers")]
		public ISingleResult<usp_GetGroupUsersResult> usp_GetGroupUsers([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupId", DbType="Int")] System.Nullable<int> groupId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupId);
			return ((ISingleResult<usp_GetGroupUsersResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_UpdateInvited")]
		public int usp_UpdateInvited([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Email", DbType="NVarChar(256)")] string email, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="NVarChar(128)")] string userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), email, userId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_IsGroupAdmin")]
		public ISingleResult<usp_IsGroupAdminResult> usp_IsGroupAdmin([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupId", DbType="Int")] System.Nullable<int> groupId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserEmail", DbType="NVarChar(256)")] string userEmail)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupId, userEmail);
			return ((ISingleResult<usp_IsGroupAdminResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_AddUserToEvent")]
		public int usp_AddUserToEvent([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserEmail", DbType="NVarChar(256)")] string userEmail, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EventId", DbType="Int")] System.Nullable<int> eventId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="StatusName", DbType="VarChar(128)")] string statusName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userEmail, eventId, statusName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_GetEvent")]
		public ISingleResult<usp_GetEventResult> usp_GetEvent([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupId", DbType="Int")] System.Nullable<int> groupId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EventName", DbType="VarChar(128)")] string eventName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MaxPrice", DbType="Decimal(13,3)")] System.Nullable<decimal> maxPrice, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EventDate", DbType="DateTime2")] System.Nullable<System.DateTime> eventDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="VarChar(128)")] string userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupId, eventName, maxPrice, eventDate, userId);
			return ((ISingleResult<usp_GetEventResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_AddEvent")]
		public int usp_AddEvent([global::System.Data.Linq.Mapping.ParameterAttribute(Name="EventName", DbType="VarChar(128)")] string eventName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EventDate", DbType="DateTime2")] System.Nullable<System.DateTime> eventDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MaxPrice", DbType="Decimal(13,3)")] System.Nullable<decimal> maxPrice, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupID", DbType="Int")] System.Nullable<int> groupID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="VarChar(128)")] string userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eventName, eventDate, maxPrice, groupID, userId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_GetGroups")]
		public ISingleResult<usp_GetGroupsResult> usp_GetGroups([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="VarChar(128)")] string userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId);
			return ((ISingleResult<usp_GetGroupsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_DeleteEvent")]
		public int usp_DeleteEvent([global::System.Data.Linq.Mapping.ParameterAttribute(Name="EventId", DbType="Int")] System.Nullable<int> eventId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eventId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_DeleteUserFromEvent")]
		public int usp_DeleteUserFromEvent([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserEmail", DbType="VarChar(128)")] string userEmail, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EventId", DbType="Int")] System.Nullable<int> eventId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userEmail, eventId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_IsEventAdmin")]
		public ISingleResult<usp_IsEventAdminResult> usp_IsEventAdmin([global::System.Data.Linq.Mapping.ParameterAttribute(Name="EventId", DbType="Int")] System.Nullable<int> eventId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserEmail", DbType="NVarChar(256)")] string userEmail)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eventId, userEmail);
			return ((ISingleResult<usp_IsEventAdminResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_AddNewGroup")]
		public int usp_AddNewGroup([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupName", DbType="VarChar(128)")] string groupName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="VarChar(128)")] string userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupName, userId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_DeleteUserFromGroup")]
		public int usp_DeleteUserFromGroup([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserEmail", DbType="VarChar(128)")] string userEmail, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupId", DbType="Int")] System.Nullable<int> groupId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userEmail, groupId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_AddGiftToEvent")]
		public int usp_AddGiftToEvent([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserID", DbType="VarChar(128)")] string userID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EventID", DbType="Int")] System.Nullable<int> eventID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GiftTitle", DbType="NVarChar(128)")] string giftTitle, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GiftDescription", DbType="NVarChar(MAX)")] string giftDescription, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GiftPrice", DbType="Decimal(13,3)")] System.Nullable<decimal> giftPrice, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GiftURL", DbType="NVarChar(MAX)")] string giftURL)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, eventID, giftTitle, giftDescription, giftPrice, giftURL);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_GetEventGifts")]
		public ISingleResult<usp_GetEventGiftsResult> usp_GetEventGifts([global::System.Data.Linq.Mapping.ParameterAttribute(Name="EventID", DbType="Int")] System.Nullable<int> eventID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eventID);
			return ((ISingleResult<usp_GetEventGiftsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_SetGiftClaimStatus")]
		public int usp_SetGiftClaimStatus([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GiftId", DbType="Int")] System.Nullable<int> giftId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="VarChar(128)")] string userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), giftId, userId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_GetEventUsers")]
		public ISingleResult<usp_GetEventUsersResult> usp_GetEventUsers([global::System.Data.Linq.Mapping.ParameterAttribute(Name="EventId", DbType="Int")] System.Nullable<int> eventId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eventId);
			return ((ISingleResult<usp_GetEventUsersResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_DeleteGiftFromEvent")]
		public int usp_DeleteGiftFromEvent([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GiftID", DbType="Int")] System.Nullable<int> giftID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), giftID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_EditEvent")]
		public int usp_EditEvent([global::System.Data.Linq.Mapping.ParameterAttribute(Name="EventName", DbType="VarChar(128)")] string eventName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EventDate", DbType="DateTime2")] System.Nullable<System.DateTime> eventDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MaxPrice", DbType="Decimal(13,3)")] System.Nullable<decimal> maxPrice, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EventID", DbType="Int")] System.Nullable<int> eventID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), eventName, eventDate, maxPrice, eventID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_EditGift")]
		public int usp_EditGift([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GiftID", DbType="Int")] System.Nullable<int> giftID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GiftTitle", DbType="NVarChar(128)")] string giftTitle, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GiftDescription", DbType="NVarChar(MAX)")] string giftDescription, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GiftPrice", DbType="Decimal(13,3)")] System.Nullable<decimal> giftPrice, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GiftURL", DbType="NVarChar(MAX)")] string giftURL)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), giftID, giftTitle, giftDescription, giftPrice, giftURL);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.usp_GetEvents")]
		public ISingleResult<usp_GetEventsResult> usp_GetEvents([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupId", DbType="Int")] System.Nullable<int> groupId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="VarChar(128)")] string userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupId, userId);
			return ((ISingleResult<usp_GetEventsResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FriendlyName")]
	public partial class FriendlyName : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FriendlyNameId;
		
		private string _FriendlyName1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFriendlyNameIdChanging(int value);
    partial void OnFriendlyNameIdChanged();
    partial void OnFriendlyName1Changing(string value);
    partial void OnFriendlyName1Changed();
    #endregion
		
		public FriendlyName()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FriendlyNameId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FriendlyNameId
		{
			get
			{
				return this._FriendlyNameId;
			}
			set
			{
				if ((this._FriendlyNameId != value))
				{
					this.OnFriendlyNameIdChanging(value);
					this.SendPropertyChanging();
					this._FriendlyNameId = value;
					this.SendPropertyChanged("FriendlyNameId");
					this.OnFriendlyNameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="FriendlyName", Storage="_FriendlyName1", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string FriendlyName1
		{
			get
			{
				return this._FriendlyName1;
			}
			set
			{
				if ((this._FriendlyName1 != value))
				{
					this.OnFriendlyName1Changing(value);
					this.SendPropertyChanging();
					this._FriendlyName1 = value;
					this.SendPropertyChanged("FriendlyName1");
					this.OnFriendlyName1Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PasswordTable")]
	public partial class PasswordTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PasswordId;
		
		private string _PasswordText;
		
		private EntityRef<UserTable> _UserTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPasswordIdChanging(int value);
    partial void OnPasswordIdChanged();
    partial void OnPasswordTextChanging(string value);
    partial void OnPasswordTextChanged();
    #endregion
		
		public PasswordTable()
		{
			this._UserTable = default(EntityRef<UserTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PasswordId
		{
			get
			{
				return this._PasswordId;
			}
			set
			{
				if ((this._PasswordId != value))
				{
					if (this._UserTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPasswordIdChanging(value);
					this.SendPropertyChanging();
					this._PasswordId = value;
					this.SendPropertyChanged("PasswordId");
					this.OnPasswordIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordText", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string PasswordText
		{
			get
			{
				return this._PasswordText;
			}
			set
			{
				if ((this._PasswordText != value))
				{
					this.OnPasswordTextChanging(value);
					this.SendPropertyChanging();
					this._PasswordText = value;
					this.SendPropertyChanged("PasswordText");
					this.OnPasswordTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTable_PasswordTable", Storage="_UserTable", ThisKey="PasswordId", OtherKey="PasswordId", IsForeignKey=true)]
		public UserTable UserTable
		{
			get
			{
				return this._UserTable.Entity;
			}
			set
			{
				UserTable previousValue = this._UserTable.Entity;
				if (((previousValue != value) 
							|| (this._UserTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserTable.Entity = null;
						previousValue.PasswordTables.Remove(this);
					}
					this._UserTable.Entity = value;
					if ((value != null))
					{
						value.PasswordTables.Add(this);
						this._PasswordId = value.PasswordId;
					}
					else
					{
						this._PasswordId = default(int);
					}
					this.SendPropertyChanged("UserTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserTable")]
	public partial class UserTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private System.Nullable<int> _FriendlyNameId;
		
		private int _PasswordId;
		
		private string _UserName;
		
		private EntitySet<PasswordTable> _PasswordTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnFriendlyNameIdChanging(System.Nullable<int> value);
    partial void OnFriendlyNameIdChanged();
    partial void OnPasswordIdChanging(int value);
    partial void OnPasswordIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public UserTable()
		{
			this._PasswordTables = new EntitySet<PasswordTable>(new Action<PasswordTable>(this.attach_PasswordTables), new Action<PasswordTable>(this.detach_PasswordTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FriendlyNameId", DbType="Int")]
		public System.Nullable<int> FriendlyNameId
		{
			get
			{
				return this._FriendlyNameId;
			}
			set
			{
				if ((this._FriendlyNameId != value))
				{
					this.OnFriendlyNameIdChanging(value);
					this.SendPropertyChanging();
					this._FriendlyNameId = value;
					this.SendPropertyChanged("FriendlyNameId");
					this.OnFriendlyNameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordId", DbType="Int NOT NULL")]
		public int PasswordId
		{
			get
			{
				return this._PasswordId;
			}
			set
			{
				if ((this._PasswordId != value))
				{
					this.OnPasswordIdChanging(value);
					this.SendPropertyChanging();
					this._PasswordId = value;
					this.SendPropertyChanged("PasswordId");
					this.OnPasswordIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTable_PasswordTable", Storage="_PasswordTables", ThisKey="PasswordId", OtherKey="PasswordId")]
		public EntitySet<PasswordTable> PasswordTables
		{
			get
			{
				return this._PasswordTables;
			}
			set
			{
				this._PasswordTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PasswordTables(PasswordTable entity)
		{
			this.SendPropertyChanging();
			entity.UserTable = this;
		}
		
		private void detach_PasswordTables(PasswordTable entity)
		{
			this.SendPropertyChanging();
			entity.UserTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUsers")]
	public partial class AspNetUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Email;
		
		private bool _EmailConfirmed;
		
		private string _PasswordHash;
		
		private string _SecurityStamp;
		
		private string _PhoneNumber;
		
		private bool _PhoneNumberConfirmed;
		
		private bool _TwoFactorEnabled;
		
		private System.Nullable<System.DateTime> _LockoutEndDateUtc;
		
		private bool _LockoutEnabled;
		
		private int _AccessFailedCount;
		
		private string _UserName;
		
		private EntitySet<UserGroupTable> _UserGroupTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEmailConfirmedChanging(bool value);
    partial void OnEmailConfirmedChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnSecurityStampChanging(string value);
    partial void OnSecurityStampChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnPhoneNumberConfirmedChanging(bool value);
    partial void OnPhoneNumberConfirmedChanged();
    partial void OnTwoFactorEnabledChanging(bool value);
    partial void OnTwoFactorEnabledChanged();
    partial void OnLockoutEndDateUtcChanging(System.Nullable<System.DateTime> value);
    partial void OnLockoutEndDateUtcChanged();
    partial void OnLockoutEnabledChanging(bool value);
    partial void OnLockoutEnabledChanged();
    partial void OnAccessFailedCountChanging(int value);
    partial void OnAccessFailedCountChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public AspNetUser()
		{
			this._UserGroupTables = new EntitySet<UserGroupTable>(new Action<UserGroupTable>(this.attach_UserGroupTables), new Action<UserGroupTable>(this.detach_UserGroupTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailConfirmed", DbType="Bit NOT NULL")]
		public bool EmailConfirmed
		{
			get
			{
				return this._EmailConfirmed;
			}
			set
			{
				if ((this._EmailConfirmed != value))
				{
					this.OnEmailConfirmedChanging(value);
					this.SendPropertyChanging();
					this._EmailConfirmed = value;
					this.SendPropertyChanged("EmailConfirmed");
					this.OnEmailConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(MAX)")]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityStamp", DbType="NVarChar(MAX)")]
		public string SecurityStamp
		{
			get
			{
				return this._SecurityStamp;
			}
			set
			{
				if ((this._SecurityStamp != value))
				{
					this.OnSecurityStampChanging(value);
					this.SendPropertyChanging();
					this._SecurityStamp = value;
					this.SendPropertyChanged("SecurityStamp");
					this.OnSecurityStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(MAX)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumberConfirmed", DbType="Bit NOT NULL")]
		public bool PhoneNumberConfirmed
		{
			get
			{
				return this._PhoneNumberConfirmed;
			}
			set
			{
				if ((this._PhoneNumberConfirmed != value))
				{
					this.OnPhoneNumberConfirmedChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumberConfirmed = value;
					this.SendPropertyChanged("PhoneNumberConfirmed");
					this.OnPhoneNumberConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoFactorEnabled", DbType="Bit NOT NULL")]
		public bool TwoFactorEnabled
		{
			get
			{
				return this._TwoFactorEnabled;
			}
			set
			{
				if ((this._TwoFactorEnabled != value))
				{
					this.OnTwoFactorEnabledChanging(value);
					this.SendPropertyChanging();
					this._TwoFactorEnabled = value;
					this.SendPropertyChanged("TwoFactorEnabled");
					this.OnTwoFactorEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEndDateUtc", DbType="DateTime")]
		public System.Nullable<System.DateTime> LockoutEndDateUtc
		{
			get
			{
				return this._LockoutEndDateUtc;
			}
			set
			{
				if ((this._LockoutEndDateUtc != value))
				{
					this.OnLockoutEndDateUtcChanging(value);
					this.SendPropertyChanging();
					this._LockoutEndDateUtc = value;
					this.SendPropertyChanged("LockoutEndDateUtc");
					this.OnLockoutEndDateUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEnabled", DbType="Bit NOT NULL")]
		public bool LockoutEnabled
		{
			get
			{
				return this._LockoutEnabled;
			}
			set
			{
				if ((this._LockoutEnabled != value))
				{
					this.OnLockoutEnabledChanging(value);
					this.SendPropertyChanging();
					this._LockoutEnabled = value;
					this.SendPropertyChanged("LockoutEnabled");
					this.OnLockoutEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessFailedCount", DbType="Int NOT NULL")]
		public int AccessFailedCount
		{
			get
			{
				return this._AccessFailedCount;
			}
			set
			{
				if ((this._AccessFailedCount != value))
				{
					this.OnAccessFailedCountChanging(value);
					this.SendPropertyChanging();
					this._AccessFailedCount = value;
					this.SendPropertyChanged("AccessFailedCount");
					this.OnAccessFailedCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_UserGroupTable", Storage="_UserGroupTables", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserGroupTable> UserGroupTables
		{
			get
			{
				return this._UserGroupTables;
			}
			set
			{
				this._UserGroupTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserGroupTables(UserGroupTable entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_UserGroupTables(UserGroupTable entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserGroupTable")]
	public partial class UserGroupTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserGroupId;
		
		private string _UserId;
		
		private int _GroupId;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
		private EntityRef<GroupTable> _GroupTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserGroupIdChanging(int value);
    partial void OnUserGroupIdChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    #endregion
		
		public UserGroupTable()
		{
			this._AspNetUser = default(EntityRef<AspNetUser>);
			this._GroupTable = default(EntityRef<GroupTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserGroupId
		{
			get
			{
				return this._UserGroupId;
			}
			set
			{
				if ((this._UserGroupId != value))
				{
					this.OnUserGroupIdChanging(value);
					this.SendPropertyChanging();
					this._UserGroupId = value;
					this.SendPropertyChanged("UserGroupId");
					this.OnUserGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int NOT NULL")]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._GroupTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_UserGroupTable", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.UserGroupTables.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.UserGroupTables.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupTable_UserGroupTable", Storage="_GroupTable", ThisKey="GroupId", OtherKey="GroupId", IsForeignKey=true)]
		public GroupTable GroupTable
		{
			get
			{
				return this._GroupTable.Entity;
			}
			set
			{
				GroupTable previousValue = this._GroupTable.Entity;
				if (((previousValue != value) 
							|| (this._GroupTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupTable.Entity = null;
						previousValue.UserGroupTables.Remove(this);
					}
					this._GroupTable.Entity = value;
					if ((value != null))
					{
						value.UserGroupTables.Add(this);
						this._GroupId = value.GroupId;
					}
					else
					{
						this._GroupId = default(int);
					}
					this.SendPropertyChanged("GroupTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventTable")]
	public partial class EventTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventId;
		
		private System.DateTime _Date;
		
		private int _EventNameId;
		
		private decimal _MaxPrice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIdChanging(int value);
    partial void OnEventIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnEventNameIdChanging(int value);
    partial void OnEventNameIdChanged();
    partial void OnMaxPriceChanging(decimal value);
    partial void OnMaxPriceChanged();
    #endregion
		
		public EventTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime2 NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventNameId", DbType="Int NOT NULL")]
		public int EventNameId
		{
			get
			{
				return this._EventNameId;
			}
			set
			{
				if ((this._EventNameId != value))
				{
					this.OnEventNameIdChanging(value);
					this.SendPropertyChanging();
					this._EventNameId = value;
					this.SendPropertyChanged("EventNameId");
					this.OnEventNameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxPrice", DbType="Decimal(13,3) NOT NULL")]
		public decimal MaxPrice
		{
			get
			{
				return this._MaxPrice;
			}
			set
			{
				if ((this._MaxPrice != value))
				{
					this.OnMaxPriceChanging(value);
					this.SendPropertyChanging();
					this._MaxPrice = value;
					this.SendPropertyChanged("MaxPrice");
					this.OnMaxPriceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupTable")]
	public partial class GroupTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupId;
		
		private string _GroupName;
		
		private EntitySet<UserGroupTable> _UserGroupTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    #endregion
		
		public GroupTable()
		{
			this._UserGroupTables = new EntitySet<UserGroupTable>(new Action<UserGroupTable>(this.attach_UserGroupTables), new Action<UserGroupTable>(this.detach_UserGroupTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupTable_UserGroupTable", Storage="_UserGroupTables", ThisKey="GroupId", OtherKey="GroupId")]
		public EntitySet<UserGroupTable> UserGroupTables
		{
			get
			{
				return this._UserGroupTables;
			}
			set
			{
				this._UserGroupTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserGroupTables(UserGroupTable entity)
		{
			this.SendPropertyChanging();
			entity.GroupTable = this;
		}
		
		private void detach_UserGroupTables(UserGroupTable entity)
		{
			this.SendPropertyChanging();
			entity.GroupTable = null;
		}
	}
	
	public partial class usp_GetGroupUsersResult
	{
		
		private string _UserName;
		
		private string _Email;
		
		private string _InvitedEmail;
		
		private string _Status;
		
		public usp_GetGroupUsersResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this._Email = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvitedEmail", DbType="NVarChar(256)")]
		public string InvitedEmail
		{
			get
			{
				return this._InvitedEmail;
			}
			set
			{
				if ((this._InvitedEmail != value))
				{
					this._InvitedEmail = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
	}
	
	public partial class usp_IsGroupAdminResult
	{
		
		private string _Status;
		
		public usp_IsGroupAdminResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
	}
	
	public partial class usp_GetEventResult
	{
		
		private int _EventId;
		
		public usp_GetEventResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Int NOT NULL")]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					this._EventId = value;
				}
			}
		}
	}
	
	public partial class usp_GetGroupsResult
	{
		
		private int _GroupId;
		
		private string _GroupName;
		
		public usp_GetGroupsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int NOT NULL")]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this._GroupId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this._GroupName = value;
				}
			}
		}
	}
	
	public partial class usp_IsEventAdminResult
	{
		
		private string _Status;
		
		public usp_IsEventAdminResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
	}
	
	public partial class usp_GetEventGiftsResult
	{
		
		private int _GiftId;
		
		private string _Title;
		
		private string _Description;
		
		private System.Nullable<decimal> _Price;
		
		private string _URL;
		
		private System.Nullable<int> _ClaimUserEventId;
		
		private int _SubmitUserEventId;
		
		public usp_GetEventGiftsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GiftId", DbType="Int NOT NULL")]
		public int GiftId
		{
			get
			{
				return this._GiftId;
			}
			set
			{
				if ((this._GiftId != value))
				{
					this._GiftId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(13,3)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this._Price = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="NVarChar(MAX)")]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this._URL = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimUserEventId", DbType="Int")]
		public System.Nullable<int> ClaimUserEventId
		{
			get
			{
				return this._ClaimUserEventId;
			}
			set
			{
				if ((this._ClaimUserEventId != value))
				{
					this._ClaimUserEventId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitUserEventId", DbType="Int NOT NULL")]
		public int SubmitUserEventId
		{
			get
			{
				return this._SubmitUserEventId;
			}
			set
			{
				if ((this._SubmitUserEventId != value))
				{
					this._SubmitUserEventId = value;
				}
			}
		}
	}
	
	public partial class usp_GetEventUsersResult
	{
		
		private int _UserEventId;
		
		private int _EventId;
		
		private string _UserName;
		
		private string _Email;
		
		private string _Status;
		
		public usp_GetEventUsersResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserEventId", DbType="Int NOT NULL")]
		public int UserEventId
		{
			get
			{
				return this._UserEventId;
			}
			set
			{
				if ((this._UserEventId != value))
				{
					this._UserEventId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Int NOT NULL")]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					this._EventId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this._Email = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
	}
	
	public partial class usp_GetEventsResult
	{
		
		private int _EventId;
		
		private string _EventName;
		
		private System.DateTime _Date;
		
		private decimal _MaxPrice;
		
		public usp_GetEventsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Int NOT NULL")]
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					this._EventId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventName", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string EventName
		{
			get
			{
				return this._EventName;
			}
			set
			{
				if ((this._EventName != value))
				{
					this._EventName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime2 NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxPrice", DbType="Decimal(13,3) NOT NULL")]
		public decimal MaxPrice
		{
			get
			{
				return this._MaxPrice;
			}
			set
			{
				if ((this._MaxPrice != value))
				{
					this._MaxPrice = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
